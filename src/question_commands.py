import datetime
import json
import os
import random
import sys
import time

import discord
from colorama import Back, Fore, Style
from discord import Embed, Interaction, app_commands

question_path = os.path.dirname(sys.argv[0]) + "/questions/"


def load_question_contents(name) -> dict:
    with open(question_path + name, "r") as f:
        return json.load(f)


dares = load_question_contents("dare-en_EN.json")
nhie = load_question_contents("nhie-en_EN.json")
rather = load_question_contents("rather-en_EN.json")
truth = load_question_contents("truth-en_EN.json")
wwyd = load_question_contents("wwyd-en_EN.json")


GAME_TYPES = {
    "nhie": ("Never Have I Ever", nhie),
    "dare": ("Dare", dares),
    "rather": ("Would You Rather", rather),
    "truth": ("Truth", truth),
    "wwyd": ("What Would You do", wwyd),
}

EMBED_COLOR = 0x25ACE3


def prfx() -> str:
    return (
        Back.BLACK
        + Fore.GREEN
        + time.strftime("%H:%M:%S UTC", time.gmtime())
        + Back.RESET
        + Fore.WHITE
        + Style.BRIGHT
    )


def log_interaction(interaction: Interaction, name=None) -> None:
    if not name:
        cmd = interaction.command
        if cmd:
            name = f'"{cmd.name}" Question Command'
        else:
            name = "Unkown"

    print(
        f"{prfx()} {Fore.YELLOW}{name} {Fore.WHITE}called by {Fore.MAGENTA}{interaction.user}"
    )


async def question(interaction, game_type, followup=False) -> None:
    game_questions = GAME_TYPES[game_type][1]

    category = random.choice(list(game_questions.keys()))
    question = random.choice(game_questions[category])

    new_embed = Embed(title=question, color=EMBED_COLOR)
    new_embed.set_footer(
        text=f"Type: {GAME_TYPES[game_type][0]} |  Category: {category}"
    )
    new_embed.set_author(
        name=f"Generated by {interaction.user.display_name}",
        icon_url=interaction.user.display_avatar,
    )

    if followup:
        await interaction.followup.send(embed=new_embed, view=Buttons(game_type))
        return

    await interaction.response.send_message(embed=new_embed, view=Buttons(game_type))


class QuestionCommands(app_commands.Group):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.start_time = time.time()

    @app_commands.command(name="stats")
    async def stats_command(self, interaction: Interaction):
        """Displays how many questions this bot has access to."""

        new_embed = Embed(title="Question Stats", color=EMBED_COLOR)

        total_count = 0
        for name, question_list in GAME_TYPES.values():
            count = len(sum(question_list.values(), []))
            total_count += count
            new_embed.add_field(name=name, value=f"{count} Questions")

        new_embed.title = f"Question Stats  |  Total: {total_count} Questions"

        uptime = str(
            datetime.timedelta(seconds=int(round(time.time() - self.start_time)))
        )
        new_embed.set_footer(
            text=f"Generated at {time.strftime('%H:%M:%S UTC', time.gmtime())}  |  Uptime: {uptime}"
        )

        await interaction.response.send_message(embed=new_embed)
        log_interaction(interaction)

    @app_commands.command(name="random")
    async def random_command(self, interaction: Interaction):
        """Generates a random question."""
        game_type = random.choice(list(GAME_TYPES.keys()))

        await question(interaction, game_type)
        log_interaction(interaction)

    @app_commands.command(name="never")
    async def never_command(self, interaction: Interaction):
        """Generates a random never have i ever question."""

        await question(interaction, "nhie")
        log_interaction(interaction)

    @app_commands.command(name="dare")
    async def dare_command(self, interaction: Interaction):
        """Generates a random dare."""

        await question(interaction, "dare")
        log_interaction(interaction)

    @app_commands.command(name="rather")
    async def rather_command(self, interaction: Interaction):
        """Generates a random would you rather question."""

        await question(interaction, "rather")
        log_interaction(interaction)

    @app_commands.command(name="truth")
    async def truth_command(self, interaction: Interaction):
        """Generates a random truth question."""

        await question(interaction, "truth")
        log_interaction(interaction)

    @app_commands.command(name="wwyd")
    async def wwyd_command(self, interaction: Interaction):
        """Generates a random what would you do question."""

        await question(interaction, "wwyd")
        log_interaction(interaction)


class Buttons(discord.ui.View):
    def __init__(self, game_type, *, timeout=300):
        super().__init__(timeout=timeout)
        self.game_type = game_type

    @discord.ui.button(label="Another", style=discord.ButtonStyle.success)
    async def another_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        await interaction.response.edit_message(view=None)
        await question(interaction, self.game_type, followup=True)
        log_interaction(interaction, name='"another" Button')

    @discord.ui.button(label="Random", style=discord.ButtonStyle.primary, emoji="🎲")
    async def random_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        self.game_type = random.choice(list(GAME_TYPES.keys()))
        await interaction.response.edit_message(view=None)
        await question(interaction, self.game_type, followup=True)
        log_interaction(interaction, name='"random" Button')

    @discord.ui.button(label="Skip", style=discord.ButtonStyle.secondary, emoji="➡️")
    async def skip_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        disabled_embed = interaction.message.embeds[0]
        disabled_embed.color = 0x222222
        disabled_embed.remove_footer()
        disabled_embed.remove_author()

        await interaction.response.edit_message(embed=disabled_embed, view=None)
        await question(interaction, self.game_type, followup=True)
        log_interaction(interaction, name='"skip" Button')


async def setup(client) -> None:
    client.tree.add_command(
        QuestionCommands(name="questions", description="A collection of party questions.")
    )
