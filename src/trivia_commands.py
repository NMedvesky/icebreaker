import datetime
import json
import os
import random
import sys
import time
from enum import Enum
from typing import Literal

import discord
from colorama import Back, Fore, Style
from discord import Embed, Interaction, app_commands

trivia_path = os.path.dirname(sys.argv[0]) + "/trivia/"

category_files = os.listdir(trivia_path)
categories = {}

for category in category_files:
    with open(trivia_path + category, "r") as f:
        categories[category[:-5]] = json.load(f)

category_list = list(categories.keys())

EMBED_COLOR = 0x25ACE3
CORRECT_EMBED_COLOR = 0x00FFAA


def prfx() -> str:
    return (
        Back.BLACK
        + Fore.GREEN
        + time.strftime("%H:%M:%S UTC", time.gmtime())
        + Back.RESET
        + Fore.WHITE
        + Style.BRIGHT
    )


def log_interaction(interaction: Interaction, name=None):
    if not name:
        cmd = interaction.command
        if cmd:
            name = f'"{cmd.name}" Trivia Command'
        else:
            name = "Unkown"

    print(
        f"{prfx()} {Fore.YELLOW}{name} {Fore.WHITE}called by {Fore.MAGENTA}{interaction.user}"
    )


async def question(interaction, category, followup=False):
    question = random.choice(categories[category])

    # Handle questions longer than 256 chars
    description = ""
    if len(question["question"]) > 256:
        description += "**" + question["question"] + "**\n\n"
        title = ""
    else:
        title = question["question"]

    # List and choices and make them bold
    choices_len = [len(x) for x in question["choices"]]
    new_line = "\n" if max(choices_len) > 16 else ""
    description += "**" + f"**,{new_line} **".join(question["choices"]) + "**"

    # description += "Choices:"

    # Embed with question info
    new_embed = Embed(title=title, description=description, color=EMBED_COLOR)
    new_embed.set_footer(text=f"Type: Trivia |  Category: {category}")
    new_embed.set_author(
        name=f"Generated by {interaction.user.display_name}",
        icon_url=interaction.user.display_avatar,
    )

    # for choice in question["choices"]:
    #     new_embed.add_field(name=choice, value="")

    # If called and interaction.response has been used already
    if followup:
        await interaction.followup.send(
            embed=new_embed, view=AnswerButton(question, category)
        )
        return

    # Send message with view for buttons
    await interaction.response.send_message(
        embed=new_embed, view=AnswerButton(question, category)
    )


class TriviaCommands(app_commands.Group):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.start_time = time.time()

    @app_commands.command(name="stats")
    async def stats_command(self, interaction: Interaction):
        """Displays how many trivia questions this bot has access to."""

        new_embed = Embed(title="Trivia Stats", color=EMBED_COLOR)

        total_count = 0

        for name, question_list in categories.items():
            count = len(question_list)
            total_count += count
            new_embed.add_field(name=name, value=f"{count} Questions")

        new_embed.title = f"Trivia Stats  |  Total: {total_count} Questions"

        uptime = str(
            datetime.timedelta(seconds=int(round(time.time() - self.start_time)))
        )
        new_embed.set_footer(
            text=f"Generated at {time.strftime('%H:%M:%S UTC', time.gmtime())}  |  Uptime: {uptime}"
        )

        await interaction.response.send_message(embed=new_embed)
        log_interaction(interaction)

    @app_commands.command(name="random")
    async def random_command(self, interaction: Interaction):
        """Generates a random trivia question."""

        category = random.choice(list(categories.keys()))

        await question(interaction, category)
        log_interaction(interaction)

    @app_commands.command(name="category")
    async def category_command(
        self, interaction: Interaction, category: Literal[tuple(category_list)]
    ):
        """Generates a trivia question with the selected category."""

        await question(interaction, category)
        log_interaction(interaction)


class AnswerButton(discord.ui.View):
    def __init__(self, question, category, *, timeout=None):
        super().__init__(timeout=timeout)
        self.question = question
        self.category = category

    @discord.ui.button(label="Show Answer", style=discord.ButtonStyle.success)
    async def another_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        answer_embed = Embed(
            title=self.question["answer"],
            description=self.question["question"],
            color=CORRECT_EMBED_COLOR,
        )
        answer_embed.set_footer(text=f"Type: Trivia |  Category: {self.category}")
        answer_embed.set_author(
            name=f"Generated by {interaction.user.display_name}",
            icon_url=interaction.user.display_avatar,
        )
        await interaction.response.edit_message(view=None)
        await interaction.followup.send(embed=answer_embed, view=Buttons(self.category))

        log_interaction(interaction, name='"answer" Trivia Button')

    @discord.ui.button(label="Skip", style=discord.ButtonStyle.secondary, emoji="➡️")
    async def skip_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        disabled_embed = interaction.message.embeds[0]
        disabled_embed.color = 0x222222
        disabled_embed.remove_footer()
        disabled_embed.remove_author()

        await interaction.response.edit_message(embed=disabled_embed, view=None)
        await question(interaction, self.category, followup=True)
        log_interaction(interaction, name='"skip" Button')


class Buttons(discord.ui.View):
    def __init__(self, category, *, timeout=300):
        super().__init__(timeout=timeout)
        self.category = category

    @discord.ui.button(label="Another", style=discord.ButtonStyle.success)
    async def another_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        await interaction.response.edit_message(view=None)
        await question(interaction, self.category, followup=True)
        log_interaction(interaction, name='"another" Button')

    @discord.ui.button(label="Random", style=discord.ButtonStyle.primary, emoji="🎲")
    async def random_question(
        self,
        interaction: discord.Interaction,
        button: discord.ui.Button,
    ):
        category = random.choice(list(categories.keys()))

        await interaction.response.edit_message(view=None)
        await question(interaction, category, followup=True)
        log_interaction(interaction, name='"random" Button')


async def setup(client) -> None:
    client.tree.add_command(
        TriviaCommands(name="trivia", description="A ton of trivia questions.")
    )
